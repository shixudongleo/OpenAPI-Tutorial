swagger: '2.0'
host: swagger.io
basePath: /
info:
  title: Swagger Sample App
  description: This is a sample server Petstore server.
  termsOfService: http://swagger.io/terms/
  contact:
    name: API Support
    url: http://www.swagger.io/support
    email: support@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1

schemes:
 - https

consumes:
  - application/json

produces:
  - application/json

paths:
    /talks:
      get:
        description: get list of talks 
        responses:
          200:
            description: OK

      post:
        summary: register a talk
        description: register a talk, speaker_id, title, date time, tags
        parameters:
          - name: presentation
            in: body
            description: the details of a talk
            schema:
              type: object
              required: [speaker_id, title, datetime]
              properties:
                speaker_id: 
                  type: integer
                title:
                  type: string
                datetime:
                  type: string
                tags:
                  type: array
                  items:
                    type: string

        responses:
          201:
            description: Created the talk
            schema:
              required: [talk_id]
              properties:
                talk_id:
                  type: integer

    /speakers:
      get:
        description: get a list of speakers 
        responses:
          200:
            description: OK

      post:
        summary: register a speaker
        description: register a speakers, including the basic profile, name, country, phone
        parameters:
          - name: profile
            in: body
            description: the profile details of speaker
            schema:
              type: object
              required: [first_name, last_name]
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                country:
                  type: string
                phone:
                  type: string
        
        responses:
          201:
            description: Created speaker
            schema:
              required: [speaker_id]
              properties:
                speaker_id:
                  type: integer
   
    /pets:
      get:
        summary: Get a list of pets
        description: Retrieve a list of pets
        responses:
          200:
            description: OK
      post:
        summary: Add pet to DB
        description: Results in new pet information added to the DB
        parameters:
          - name: pet
            in: body
            description: Pet details
            schema:
              required: [name, status]
              properties:
                name:
                  type: string
                  description: The pet name
                status:
                  type: string
                  description: The pet status
        responses:
          201:
            description: Created new pet in the database
            schema:
              required: [pet-id]
              properties:
                pet-id:
                  type: number
                  description: Unique Id for the pet in the system